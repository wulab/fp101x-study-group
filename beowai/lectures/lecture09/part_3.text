Declaring Types and Classes - Part 3

Arithmetic Expressions
Consider a simple form of expressions built up from integers using addition and multiplication.
1 + 2 * 3 represents

    +
1       *
    2       3    

Using recursion, a suitable new type to represent such expressions can be declared by:

data Expr = Val Int
            | Add Expr Expr
            | Mul Expr Expr

For example, the expression on the previous sum would be represented as follows:

Add (Val 1) (Mul (Val 2) (Val 3))

Using recursion, it is now easy to define functions that process expressions.
For example:

size :: Expr -> Int
size (Val n) = 1
size (Add x y) = size x + size y
size (Mul x y) = size x + size y

eval :: Expr -> Int
eval (Val n) = n
eval (Add x y) = eval x + eval y
eval (Mul x y) = eval x * eval y

Note:
- The three constructors have types:
Val :: Int -> Expr
Add :: Expr -> Expr -> Expr
Mul :: Expr -> Expr -> Expr
- Many functions on expressions can be defined by replacing the constructors by other functions using a suitable fold function.
For example:

eval = fold id (+) (*)

Binary Trees
In computing, it is often useful to store data in a two-way branching structure or binary tree.
Using recursion, a suitable new type to represent such binary trees

data Tree = Leaf Int
            | Node Tree Int Tree

For example, the tree on the slide would be represented as follows:

Node (Node (Leaf 1) 3 (Leaf 4)) 5 (Node (Leaf 6) 7 (Leaf 9))

We can now define a function that decieds if a given integer occurs in a binary tree:

occurs :: Int -> Tree -> Bool
occurs m (Leaf n) = m == n
occurs m (Node l n r) = m == n
                        || occurs m l
                        || occurs m r

But... in the worst case, when the integer does not occur, 
this function traverses the entire tree.

Now consider the function flatten that returns the list of all the integers contained in a tree:

flatten :: Tree -> [Int]
flatten (Leaf n) = [n]
flatten (Node l n r) = flatten l ++ [n] ++ flatten r

A tree is a search tree if it flattens to a list that is ordered.
Our example tree is a search tree, as it flattens to the ordered list [1,3,4,5,6,7,9]

Search trees have the important property that when trying to find a value in a tree
we can always decied which of the two sub-trees it may occur in:

occurs m (Leaf n) = m == n
occurs m (Node l n r)
    | m == n = True
    | m < n = occurs m l
    | m > n = occurs m r

This new definition is more efficient, because in only traverses one path down the tree.