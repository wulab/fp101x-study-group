Declaring Types and Classes - Part 1

type declarations

type Strng = [Char]

Type declarations can be used to make other types easier to read

type Pos = (Int, Int)

we can define:
origin :: Pos
origin = (0, 0)

left :: Pos -> Pos
left (x, y) = (x-1, y)

Like function definitions, type declarations can also have parameters.

type Pair a = (a, a)

we can define
mult :: Pair Int -> Int
mult (m, n) = m*n

copy :: a -> Pair a
copy x = (x, x)

Type declarations can be nested
type Pos = (Int, Int)

type Trans = Pos -> Pos

However, they cannot be recursive
type Tree = (int, [Tree]) --- NOT ALLOWED!!!

Data declarations
A completely new type can be by specifying its values using a data declarations

data Bool = False | True

Note:
- The two values False and True are called the constructors for the type Bool.
- Type and constructor names must begin with an upper-case letter.
- Data declarations are similar to context free grammars.
the former specifies the values of a type, the latter the sentences of a language.

Values of new types can be used in the same ways as those of built in types

data Answer = Yes | No | Unknown

we can define:
answers :: [Answer]
answers = [Yes, No, Unknown]

flip :: Answer -> Answer
flip Yes = No
flip No = Yes
flip Unknown = Unknown

The constructors in a data declaration can also have paramaters

data Shape = Circle Float
            | Rect Float Float

we can define
square :: Float -> Shape
square n = Rect n n

area :: Shape -> Float
area (Circle r) = pi * r^2
area (Rect x y) = x * y

Note:
- Shape has values of the form Circle r where r is a float,
and Rect x y where x and y are floats
- Circle and Rect can be viewed as functions that construct values of type Shape:
    Circle :: Float -> Shape
    Rect :: Float -> Float -> Shape
    
Maybe type is like a list which is empty or has a single value

data Maybe a = Nothing | Just a

we can define:
safediv :: Int -> Int -> Maybe Int
safediv _ 0 = Nothing
safediv m n = Just (m `div` n)

safehead :: [a] -> Maybe a
safehead [] = Nothing
safehead xs = Just (head xs)